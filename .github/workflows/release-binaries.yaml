name: binaries-release

on:
  release:
    types: [created]

  workflow_dispatch:
    inputs:
      release:
        description: 'Release tag where to create the binaries (as SemVer vX.X.X)'
        required: true
        default: v0.1.0

permissions:
  contents: write
  packages: write

jobs:
  check-versions:
    name: check repo versions
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.config.outputs.version }}
      gover: ${{ steps.config.outputs.gover }}
      commit: ${{ steps.config.outputs.commit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure
        id: config
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            export RELEASE_INPUT="${{ github.ref_name }}"
          fi
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            export RELEASE_INPUT="${{ inputs.release }}"
          fi
          if [ -z "${RELEASE_INPUT}" ]; then
            echo "[ERROR] empty 'RELEASE_INPUT'."
            exit 1
          fi
          version=${RELEASE_INPUT}
          gover=$(grep '^go ' go.mod | awk '{print $2}')
          commit=$(git rev-parse --short HEAD)

          if [ "${version}" = "$(cat version)" ]; then
            echo "version=${version}" >> $GITHUB_OUTPUT
            echo "gover=${gover}" >> $GITHUB_OUTPUT
            echo "commit=${commit}" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo -n "${version}" > version

          author_name=$(git log -1 --pretty=format:'%an')
          author_email=$(git log -1 --pretty=format:'%ae')
          git config user.name "${author_name}"
          git config user.email "${author_email}"
          git add .
          git commit -m "feat: [bot] set new '${version}' version"
          git push origin ${{ github.event.repository.default_branch }}
          
          new_commit=$(git rev-parse --short HEAD)

          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "gover=${gover}" >> $GITHUB_OUTPUT
          echo "commit=${new_commit}" >> $GITHUB_OUTPUT

  binary-matrix:
    name: Release Go Binary
    runs-on: ubuntu-latest
    needs: check-versions
    strategy:
      matrix:
        # build and publish in parallel:
        # linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm64]
        exclude:
          - goarch: "386"
            goos: darwin
          - goarch: arm64
            goos: windows
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: wangyoucao577/go-release-action@v1.31
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          goversion: "https://dl.google.com/go/go${{ needs.check-versions.outputs.gover }}.linux-amd64.tar.gz"
          ldflags: "-X osproxy/internal/cmd/version.version=${{ needs.check-versions.outputs.version }} -X osproxy/internal/cmd/version.golang=${{ needs.check-versions.outputs.gover }} -X osproxy/internal/cmd/version.commit=${{ needs.check-versions.outputs.commit }}"
          project_path: "./cmd/"
          binary_name: "osproxy"
          release_tag: ${{ needs.check-versions.outputs.version }}
          overwrite: true
          extra_files: LICENSE README.md
