{{ if and .Values.proxy.enabled .Values.proxy.service.enabled }}

apiVersion: v1
kind: Service
metadata:
  name: {{ include "osproxy.fullname" . }}
  labels:
    {{- include "osproxy.labels" . | nindent 4 }}
  {{- with .Values.proxy.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:

  {{- with .Values.proxy.service.type }}
  type: {{ . }}
  {{- end }}

  {{- with .Values.proxy.service.clusterIP }}
  clusterIP: {{ . }}
  {{- end }}

  {{- if (semverCompare ">= 1.23-0" .Capabilities.KubeVersion.Version) }}
  {{- with .Values.proxy.service.ipFamilyPolicy }}
  ipFamilyPolicy: {{ . }}
  {{- end }}
  {{- with .Values.proxy.service.ipFamilies }}
  ipFamilies: {{ . | toYaml | nindent 2 }}
  {{- end }}
  {{- end }}

  {{- with .Values.proxy.service.externalTrafficPolicy }}
  externalTrafficPolicy: {{ . }}
  {{- end }}

  # We want the servers to become available even if they're not ready
  # since this DNS is also used for join operations.
  {{- with .Values.proxy.service.publishNotReadyAddresses }}
  publishNotReadyAddresses: {{ . }}
  {{- end}}

  ports:
  {{ range $key, $value := .Values.proxy.service.ports }}
    - name: {{ $value.name }}
      port: {{ $value.port }}
      targetPort: {{ $value.targetPort }}

      {{- with $value.protocol }}
      protocol: {{ . }}
      {{- end }}

      {{- if and ($value.nodePort) (eq ($.Values.proxy.service.type | toString) "NodePort") }}
      nodePort: {{ $value.nodePort }}
      {{- end }}
  {{- end}}

  selector:
    component: osproxy
    {{- include "osproxy.selectorLabels" . | nindent 4 }}
    {{- with .Values.proxy.extraLabels }}
    {{- toYaml . | nindent 8 }}
    {{- end }}

{{- end }}

